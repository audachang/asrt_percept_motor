writeLines('PATH="${RTOOLS43_HOME}/usr/bin;${PATH}"', con ="~/.Renviron")
usethis::edit_r_environ()
sessionInfo
sessionInfo()
.libPath()
.libPaths()
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
install_load()
install_load('stats')
readLines()
list.files(pattern="Renviron")
getwd()
readRenviron('~/.Renviron')
Sys.getenv()
readRenviron('.Renviron')
readRenviron('~/.Renviron')
Sys.getenv()
R.home()
Sys.getenv()
Sys.setenv(R_HOME="C:/Program Files/R/R-4.3.3")
Sys.getenv()
require(rio)
Sys.getenv()
normalizePath("~")
startup::startup(debug = TRUE)
getwd()
readLines(".Renviron")
readLines("~/.Renviron")
readLines("~/.Rprofile")
Sys.getenv()
ENV
@assert
@assert ENV["RTOOLS43_HOME"]
file.exists("C:/Program Files/R/R-4.3.3/library/stats/libs/x64/stats.dll")
libsPaths()
libPaths()
.libPaths()
Sys.getenv()
Sys.getenv()
Sys.getenv()
Sys.getenv()
Sys.getenv()
Sys.getenv("PATH")
require(reticulate)
install.packages("reticulate")
require(reticulate)
system2(conda, c("info", "--base"), stdout = TRUE)
use_condaenv("C:/miniforge3", required = TRUE)
Sys.getenv("RETICULATE_PYTHON")
require(reticulate)
use_python()
411.59 + 10209.32
2334.55-876.79
13532.18-876.79
468764/2800
115/2ã€‚54
115/2.54
100/2.54
2.54*45
(386760+1077120)/(6861328+3626628)
(6861328+3626628)
(6861328+3626628)*0.06
(1000-62)*0.8
(1000-62)*0.6
setwd("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts")
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
library(shiny); runApp('inspect_sids_shiny_v3.R')
runApp('inspect_sids_shiny_v3.R')
runApp('inspect_sids_shiny_v3.R')
runApp('inspect_sids_shiny_v3.R')
runApp('inspect_sids_shiny_v3.R')
runApp('inspect_sids_shiny_v3.R')
runApp('inspect_sids_shiny_v3.R')
runApp('inspect_sids_shiny_v3.R')
runApp('inspect_sids_shiny_v3.R')
runApp('inspect_sids_shiny_v3.R')
runApp('inspect_sids_shiny_v3.R')
runApp('inspect_sids_shiny_v3.R')
runApp('inspect_sids_shiny_v3.R')
d_summary
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
learning_res
View(learning_res)
View(d_summary)
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/asrt_ana_functions.R", echo=TRUE)
learning_res <- compute_learning_metrics(d_summary)
learning_res
View(learning_res)
learning_res$sequence_learning
#plot learning
plot_combined_learning_metrics <- function(learning_metrics) {
# Extract sequence learning and statistical learning data
sequence_learning <- learning_metrics$sequence_learning
statistical_learning <- learning_metrics$statistical_learning
# Combine the two learning metrics into a single tibble
combined_learning <- sequence_learning %>%
rename(learning = sequence_learning) %>%
mutate(type = "Sequence Learning") %>%
bind_rows(
statistical_learning %>%
rename(learning = statistical_learning) %>%
mutate(type = "Statistical Learning")
)
# Plot combined learning by seqID
combined_plot <- ggplot(combined_learning, aes(x = seqID2, y = learning, group = interaction(block_type, type), color = type)) +
geom_line(aes(linetype = block_type)) +
geom_point(size = 4) +
labs(
title = "Sequence and Statistical Learning by seqID",
x = "seqID",
y = "Learning (RT difference)",
color = "Learning Type",
linetype = "Block Type"
) +
theme_minimal(base_size = 15) +
theme(
axis.text.x = element_text(angle = 90, hjust = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
# Print the combined plot
print(combined_plot)
}
plot_combined_learning_metrics(learning_res)
View(plot_combined_learning_metrics)
learning_res
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
learning_res
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
plot_combined_learning_metrics(learning_res,
unitx = 'epoch',
fontsize = 14, show_legend = TRUE,
legend_text_size = 10)
plot_combined_learning_metrics(learning_res,
unitx = 'block',
fontsize = 14, show_legend = TRUE,
legend_text_size = 10)
runApp('inspect_sids_shiny_v3.R')
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
names(d_summary)
d_summary$seqID2
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
d_summary
names(d_summary)
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
runApp('inspect_sids_shiny_v3.R')
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
runApp('inspect_sids_shiny_v3.R')
runApp('inspect_sids_shiny_v3.R')
runApp('inspect_sids_shiny_v3.R')
runApp('inspect_sids_shiny_v3.R')
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/asrt_ana_functions.R", echo=TRUE)
runApp('inspect_sids_shiny_v3.R')
setwd("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts")
runApp('inspect_sids_shiny_v3.R')
runApp('inspect_sids_shiny_v3.R')
finfo <- list_file(tasktype)
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/asrt_ana_functions.R", echo=TRUE)
finfo <- list_file(tasktype)
tasktype <- 'motor'
finfo <- list_file(tasktype)
finfo
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/summ_data.R", echo=TRUE)
d_add_freq <- assign_freq(d_add_cond)
d_summary <- create_summ4plot(d_add_freq, unitx)
d_summary <- d_summary %>%
mutate(sid = sidstr, tasktype = tasktype)
report <- extr_stiseq_respseq(d, d_add_cond) #extract sti and response sequence
report <- report %>%
mutate(sid = sidstr, tasktype = tasktype)
report
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/summ_data.R", echo=TRUE)
report <- extr_stiseq_respseq(d, d_add_cond) #extract sti and response sequence
report$reportseq <- report$reportseq %>%
mutate(sid = sidstr, tasktype = tasktype)
learning_res <- compute_learning_metrics(d_summary)
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/summ_data.R", echo=TRUE)
d_summary
100000/0.084
1190*16
learning_res
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/summ_data.R", echo=TRUE)
