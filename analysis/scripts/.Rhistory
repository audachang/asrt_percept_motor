writeLines('PATH="${RTOOLS43_HOME}/usr/bin;${PATH}"', con ="~/.Renviron")
usethis::edit_r_environ()
sessionInfo
sessionInfo()
.libPath()
.libPaths()
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
install_load()
install_load('stats')
readLines()
list.files(pattern="Renviron")
getwd()
readRenviron('~/.Renviron')
Sys.getenv()
readRenviron('.Renviron')
readRenviron('~/.Renviron')
Sys.getenv()
R.home()
Sys.getenv()
Sys.setenv(R_HOME="C:/Program Files/R/R-4.3.3")
Sys.getenv()
require(rio)
Sys.getenv()
normalizePath("~")
startup::startup(debug = TRUE)
getwd()
readLines(".Renviron")
readLines("~/.Renviron")
readLines("~/.Rprofile")
Sys.getenv()
ENV
@assert
@assert ENV["RTOOLS43_HOME"]
file.exists("C:/Program Files/R/R-4.3.3/library/stats/libs/x64/stats.dll")
libsPaths()
libPaths()
.libPaths()
Sys.getenv()
Sys.getenv()
Sys.getenv()
Sys.getenv()
Sys.getenv()
Sys.getenv("PATH")
require(reticulate)
install.packages("reticulate")
require(reticulate)
system2(conda, c("info", "--base"), stdout = TRUE)
use_condaenv("C:/miniforge3", required = TRUE)
Sys.getenv("RETICULATE_PYTHON")
require(reticulate)
use_python()
411.59 + 10209.32
2334.55-876.79
13532.18-876.79
468764/2800
115/2ã€‚54
115/2.54
100/2.54
2.54*45
(386760+1077120)/(6861328+3626628)
(6861328+3626628)
(6861328+3626628)*0.06
(1000-62)*0.8
(1000-62)*0.6
90000 - 55400
2806*32
2626+210
(2626+210)*33
setwd("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts")
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_rotation.R", echo=TRUE)
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_rotation.R", echo=TRUE)
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_rotation.R", echo=TRUE)
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_rotation.R", echo=TRUE)
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_rotation.R", echo=TRUE)
setwd("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts")
# extracting the reported sequence and the presented sequence
extr_stiseq_respseq <- function(d3){
tmp <- d3 %>%
ungroup() %>%
select(trial_type,
correct_answer_direction) %>%
filter(trial_type=='regular') %>%
slice(1:4)
respseq <- tmp$correct_answer_direction
tmp2 <- d %>%
filter(!is.na(seq_report_key.keys)) %>%
select(starts_with('seq_report'),
starts_with('trials.this'))
reportseq <- tmp2 %>%
select(trials.thisRepN, seq_report_key.keys) %>%
group_by(trials.thisRepN) %>%
mutate(blockID = row_number()) %>%
ungroup()
report = list(stiseq=stiseq, respseq=respseq)
return(report)
}
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
fig <- asrt_plot2(unitx, tasktype, d_summary, finfo, sid)
fig <- asrt_plot2(unitx, tasktype, d_summary, finfo, sid)
finfo
extr_stiseq_respseq(d_add_cond)
# extracting the reported sequence and the presented sequence
extr_stiseq_respseq <- function(d, d_add_cond){
tmp <- d_add_cond %>%
ungroup() %>%
select(trial_type,
correct_answer_direction) %>%
filter(trial_type=='regular') %>%
slice(1:4)
respseq <- tmp$correct_answer_direction
tmp2 <- d %>%
filter(!is.na(seq_report_key.keys)) %>%
select(starts_with('seq_report'),
starts_with('trials.this'))
reportseq <- tmp2 %>%
select(trials.thisRepN, seq_report_key.keys) %>%
group_by(trials.thisRepN) %>%
mutate(blockID = row_number()) %>%
ungroup()
report = list(stiseq=stiseq, respseq=respseq)
return(report)
}
View(assign_freq)
library(shiny); runApp('inspect_sids_shiny_v2.R')
runApp('inspect_sids_shiny_v2.R')
runApp('inspect_sids_shiny_v2.R')
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
d_add_cond
d_add_freq <- assign_freq(d_add_cond)
d_summary <- create_summ4plot(d_add_freq, unitx)
View(d_summary)
asrt_plot <- function(unitx, tasktype, d_summary, finfo, sidstr) {
#fn <- finfo$fns[sid]
#sidstr <- sub("_.*", "", fn)
print(match_prefix(sidstr, finfo$fns))
if (unitx == 'epoch') {
x_var <- "seqID"
x_label <- "epoch"
figpath_suffix <- "_epoch.jpg"
base_size <- 14
facet_params <- list(. ~ block_type, scales = "free_x")
} else {
x_var <- "seqID2"
x_label <- "block"
figpath_suffix <- "_block.jpg"
base_size <- 20
facet_params <- list(. ~ block_type, scales = "free_x", space = "free_x")
}
fig <- ggplot(d_summary, aes_string(x = x_var, y = "rt",
group = "interaction(trial_type, frequency_category)",
color = "frequency_category",
shape = "trial_type",
linetype = "trial_type")) +
geom_line() +
geom_point(size=4) +
do.call(facet_grid, facet_params) +
labs(
title = paste(tasktype, sidstr, sep = "-"),
x = x_label,
y = "Reaction Time (ms)",
color = "Frequency Category",
linetype = "Trial Type"
) +
theme_minimal(base_size = base_size) +
theme(
axis.text.x = element_text(angle = 90, hjust = 1),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
text = element_text(size = base_size + 4)  # Increase font size
)
if (unitx != 'epoch') {
fig <- fig + theme(strip.text = element_blank(), strip.background = element_blank())
}
fn <- match_prefix(sidstr,finfo$fns)
figpath <- paste0('figures/', tasktype,'/', str_replace(fn, '.csv', figpath_suffix))
print(fig)
ggsave(figpath, width = ifelse(unitx== 'epoch', 20, 40), height = 15, units = "cm")
return(fig)
}
fig <- asrt_plot(unitx, tasktype, d_summary, finfo, sid)
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
sidstr <- 'sub103'
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
tasktype
d
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
source("C:/mypython/Experiments/asrt_percept_motor/analysis/scripts/test_func2.R", echo=TRUE)
runApp('inspect_sids_shiny_v2.R')
finfo$sids
runApp('inspect_sids_shiny_v2.R')
runApp('inspect_sids_shiny_v2.R')
runApp('inspect_sids_shiny_v2.R')
runApp('inspect_sids_shiny_v2.R')
runApp('inspect_sids_shiny_v2.R')
runApp('inspect_sids_shiny_v2.R')
runApp('inspect_sids_shiny_v2.R')
runApp('inspect_sids_shiny_v2.R')
runApp('inspect_sids_shiny_v2.R')
